@using DynamicForm.Models
<div class="field-editor">
    <!-- Existing field type, name, label, etc. sections remain the same -->
    <div class="form-group">
        <label>Field Type</label>
        <label>Field Type</label>
        <InputSelect Value="Field.Type"
                     ValueChanged="@(async (FieldType value) => { Field.Type = value; await OnFieldChanged.InvokeAsync(); })"
                     ValueExpression="@(() => Field.Type)"
                     class="form-control">
            @foreach (var type in Enum.GetValues(typeof(FieldType)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Name (Technical Name)</label>
        <InputText @bind-Value="Field.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Label (Display Text)</label>
        <InputText @bind-Value="Field.Label" class="form-control" />
    </div>

    @if (Field.Type != FieldType.DropDown && Field.Type != FieldType.Checkbox)
    {
        <div class="form-group">
            <label>Default Value</label>
            <InputText @bind-Value="Field.DefaultValue" class="form-control" />
        </div>
    }

    <div class="form-check">
        <InputCheckbox @bind-Value="Field.IsRequired" class="form-check-input" />
        <label class="form-check-label">Required</label>
    </div>

    <div class="form-check">
        <InputCheckbox @bind-Value="Field.IsReadonly" class="form-check-input" />
        <label class="form-check-label">Readonly</label>
    </div>

    <div class="form-check">
        <InputCheckbox @bind-Value="Field.IsHidden" class="form-check-input" />
        <label class="form-check-label">Hidden</label>
    </div>

    @if (Field.Type == FieldType.Text)
    {
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Min Length</label>
                    <InputNumber @bind-Value="Field.MinLength" class="form-control" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Max Length</label>
                    <InputNumber @bind-Value="Field.MaxLength" class="form-control" />
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>Regex Pattern</label>
            <InputText @bind-Value="Field.RegexPattern" class="form-control" />
            <small class="form-text text-muted">Optional regular expression pattern for validation</small>
        </div>
    }

    @if (Field.Type == FieldType.DropDown || Field.Type == FieldType.CascadingDropDown)
    {
        <div class="form-group">
            <label>
                <InputCheckbox @bind-Value="IsCascading" />
                Is Cascading Dropdown
            </label>
            @if (IsCascading)
            {
                <div class="card p-2 mt-2">
                    <div class="form-group">
                        <label>Parent Dropdown</label>
                        <InputSelect @bind-Value="Field.ParentFieldId" class="form-control">
                            <option value="">-- Select Parent --</option>
                            @foreach (var parentField in FormDefinition.Fields
                    .Where(f => f.Type == FieldType.DropDown && f.Id != Field.Id))
                            {
                                <option value="@parentField.Id">@parentField.Label</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label>Cascading Options</label>
                        @if (string.IsNullOrEmpty(Field.ParentFieldId))
                        {
                            <div class="alert alert-info">
                                Select a parent dropdown first
                            </div>
                        }
                        else
                        {
                            var parentField = FormDefinition.Fields.FirstOrDefault(f => f.Id == Field.ParentFieldId);
                            if (parentField != null)
                            {
                                foreach (var parentOption in parentField.Data)
                                {
                                    <div class="mb-3">
                                        <label>Options when @parentField.Label is '@parentOption.Text'</label>
                                        <button @onclick="@(() => AddCascadingOption(parentOption.Value))"
                                                class="btn btn-sm btn-primary mb-2">
                                            Add Option
                                        </button>

                                        @foreach (var item in GetCascadingOptions(parentOption.Value))
                                        {
                                            <div class="input-group mb-2">
                                                <InputText @bind-Value="item.Value" class="form-control" placeholder="Value" />
                                                <InputText @bind-Value="item.Text" class="form-control" placeholder="Text" />
                                                <button @onclick="@(() => RemoveCascadingOption(parentOption.Value, item))"
                                                        class="btn btn-danger">
                                                    &times;
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            }
            @if (!IsCascading)
            {
                <div class="form-group mt-3">
                    <label>Dropdown Options</label>
                    @foreach (var item in Field.Data)
                    {
                        <div class="input-group mb-2">
                            <InputText @bind-Value="item.Value" class="form-control" placeholder="Value" />
                            <InputText @bind-Value="item.Text" class="form-control" placeholder="Text" />
                            <button @onclick="@(() => RemoveDropdownItem(item))" class="btn btn-danger">
                                &times;
                            </button>
                        </div>
                    }
                    <button @onclick="AddDropdownItem" class="btn btn-secondary">
                        <i class="fas fa-plus"></i> Add Option
                    </button>
                </div>
            }
        </div>
    }

    <div class="rules-section mt-4">
        <h5>Rules</h5>
        <div class="rules-list">
            @foreach (var rule in Field.Rules)
            {
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between">
                        <h6>Rule @(Field.Rules.IndexOf(rule) + 1)</h6>
                        <button @onclick="@(() => RemoveRule(rule))" class="btn btn-sm btn-danger">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label>Description</label>
                            <InputText @bind-Value="rule.Description" class="form-control"
                                       placeholder="Optional description for this rule" />
                        </div>

                        <div class="form-group">
                            <label>Priority</label>
                            <InputNumber @bind-Value="rule.Priority" class="form-control" />
                            <small class="text-muted">Higher numbers execute first</small>
                        </div>

                        <div class="form-group">
                            <label>Target Field</label>
                            <InputSelect @bind-Value="rule.TargetFieldId" class="form-control">
                                <option value="">-- Select Target Field --</option>
                                @foreach (var targetField in FormDefinition.Fields.Where(f => f.Id != Field.Id))
                                {
                                    <option value="@targetField.Id">@targetField.Label</option>
                                }
                            </InputSelect>
                        </div>

                        <h6>Conditions</h6>
                        @foreach (var conditionGroup in rule.ConditionGroups)
                        {
                            <div class="condition-group card mb-2 p-2">
                                <div class="form-check mb-2">
                                    <InputCheckbox @bind-Value="conditionGroup.RequireAll" class="form-check-input" />
                                    <label class="form-check-label">Require ALL conditions (AND logic)</label>
                                </div>

                                @foreach (var condition in conditionGroup.Conditions)
                                {
                                    <div class="condition-item card mb-2 p-2">
                                        <div class="row">
                                            <div class="col-md-5">
                                                <label>Field</label>
                                                <InputSelect @bind-Value="condition.FieldId" class="form-control"
                                                             @onchange="@(() => UpdateConditionField(condition))">
                                                    <option value="">-- Select Field --</option>
                                                    @foreach (var formField in FormDefinition.Fields)
                                                    {
                                                        <option value="@formField.Id">@formField.Label</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                            <div class="col-md-3">
                                                <label>Operator</label>
                                                <InputSelect @bind-Value="condition.Operator" class="form-control">
                                                    @if (GetSelectedConditionField(condition) is FormField selectedField)
                                                    {
                                                        @foreach (var op in GetOperatorsForFieldType(selectedField.Type))
                                                        {
                                                            <option value="@op">@op</option>
                                                        }
                                                    }
                                                </InputSelect>
                                            </div>
                                            <div class="col-md-3">
                                                <label>Compare To</label>
                                                <select @bind="condition.ValueFieldId" class="form-control">
                                                    <option value="">-- Value --</option>
                                                    @if (!string.IsNullOrEmpty(condition.FieldId))
                                                    {
                                                        <option value="">Fixed Value</option>
                                                        @foreach (var compareField in FormDefinition.Fields
                                                       .Where(f => f.Id != condition.FieldId))
                                                        {
                                                            <option value="@compareField.Id">@compareField.Label</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-1 d-flex align-items-end">
                                                <button @onclick="@(() => RemoveCondition(conditionGroup, condition))"
                                                        class="btn btn-sm btn-danger">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>

                                        @if (string.IsNullOrEmpty(condition.ValueFieldId))
                                        {
                                            <div class="mt-2">
                                                <label>Value</label>
                                                @if (GetSelectedConditionField(condition) is FormField field)
                                                {
                                                    @if (field.Type == FieldType.Checkbox)
                                                    {
                                                        <InputCheckbox @bind-Value="condition.BooleanValue" class="form-check-input" />
                                                    }
                                                    else if (field.Type == FieldType.Number)
                                                    {
                                                        <InputNumber @bind-Value="condition.NumberValue" class="form-control" />
                                                    }
                                                    else if (field.Type == FieldType.Date)
                                                    {
                                                        <InputDate @bind-Value="condition.DateValue" class="form-control" />
                                                    }
                                                    else
                                                    {
                                                        <InputText @bind-Value="condition.StringValue" class="form-control" />
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                }

                                <button @onclick="@(() => AddCondition(conditionGroup))" class="btn btn-sm btn-secondary">
                                    <i class="fas fa-plus"></i> Add Condition
                                </button>
                            </div>
                        }

                        <button @onclick="@(() => AddConditionGroup(rule))" class="btn btn-sm btn-info mt-2">
                            <i class="fas fa-plus"></i> Add Condition Group (OR)
                        </button>

                        <hr />

                        <h6>Actions</h6>
                        @foreach (var action in rule.Actions)
                        {
                            <div class="action-item card mb-2 p-2">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label>Action Type</label>
                                        <InputSelect @bind-Value="action.Type" class="form-control">
                                            <option value="show">Show Field</option>
                                            <option value="hide">Hide Field</option>
                                            <option value="enable">Enable Field</option>
                                            <option value="disable">Disable Field</option>
                                            <option value="setValue">Set Value</option>
                                            <option value="setRequired">Set Required</option>
                                            <option value="loadOptions">Load Options</option>
                                            <option value="addValidation">Add Validation</option>
                                        </InputSelect>
                                    </div>

                                    <div class="col-md-7">
                                        @if (action.Type == "setValue" || action.Type == "setRequired" || action.Type == "addValidation")
                                        {
                                            <label>Value</label>
                                            @if (action.Value is bool)
                                            {
                                                <InputCheckbox @bind-Value="action.BooleanValue" class="form-check-input" />
                                            }
                                            else if (action.Value is int)
                                            {
                                                <InputNumber @bind-Value="action.NumberValue" class="form-control" />
                                            }
                                            else if (action.Value is DateTime)
                                            {
                                                <InputDate @bind-Value="action.DateValue" class="form-control" />
                                            }
                                            else
                                            {
                                                <InputText @bind-Value="action.StringValue" class="form-control" />
                                            }
                                        }
                                        else if (action.Type == "loadOptions")
                                        {
                                            <div class="card p-2">
                                                <div class="form-group">
                                                    <label>Data Source URL</label>
                                                    <InputText @bind-Value="action.DataSource.Url" class="form-control"
                                                               placeholder="e.g., /api/options?param={value}" />
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <label>Value Field</label>
                                                        <InputText @bind-Value="action.DataSource.ValueField" class="form-control"
                                                                   placeholder="Property name for value" />
                                                    </div>
                                                    <div class="col-md-6">
                                                        <label>Text Field</label>
                                                        <InputText @bind-Value="action.DataSource.TextField" class="form-control"
                                                                   placeholder="Property name for display text" />
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <div class="col-md-1 d-flex align-items-end">
                                        <button @onclick="@(() => RemoveAction(rule, action))"
                                                class="btn btn-sm btn-danger">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="form-group mt-2">
                                    <label>Message (optional)</label>
                                    <InputText @bind-Value="action.Message" class="form-control"
                                               placeholder="Shown when this action executes" />
                                </div>
                            </div>
                        }

                        <button @onclick="@(() => AddAction(rule))" class="btn btn-sm btn-secondary">
                            <i class="fas fa-plus"></i> Add Action
                        </button>
                    </div>
                </div>
            }

            <button @onclick="AddRule" class="btn btn-primary">
                <i class="fas fa-plus"></i> Add Rule
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public FormField Field { get; set; }
    [Parameter] public FormDefinition FormDefinition { get; set; }
    [Parameter] public EventCallback OnFieldChanged { get; set; }

    private bool IsCascading
    {
        get => Field.Type == FieldType.CascadingDropDown;
        set => Field.Type = value ? FieldType.CascadingDropDown : FieldType.DropDown;
    }
    private List<SelectListItem> GetCascadingOptions(string parentValue)
    {
        if (!Field.CascadingData.ContainsKey(parentValue))
        {
            Field.CascadingData[parentValue] = new List<SelectListItem>();
        }
        return Field.CascadingData[parentValue];
    }

    private void AddCascadingOption(string parentValue)
    {
        GetCascadingOptions(parentValue).Add(new SelectListItem());
        OnFieldChanged.InvokeAsync();
    }

    private void RemoveCascadingOption(string parentValue, SelectListItem item)
    {
        GetCascadingOptions(parentValue).Remove(item);
        OnFieldChanged.InvokeAsync();
    }

    private void AddDropdownItem()
    {
        Field.Data.Add(new SelectListItem());
        OnFieldChanged.InvokeAsync();
    }

    private void RemoveDropdownItem(SelectListItem item)
    {
        Field.Data.Remove(item);
        OnFieldChanged.InvokeAsync();
    }
    private FormField GetSelectedConditionField(FieldCondition condition)
    {
        return string.IsNullOrEmpty(condition.FieldId)
            ? null
            : FormDefinition.Fields.FirstOrDefault(f => f.Id == condition.FieldId);
    }

    private List<string> GetOperatorsForFieldType(FieldType type)
    {
        return type switch
        {
            FieldType.Number => new List<string> { "==", "!=", ">", "<", ">=", "<=" },
            FieldType.Checkbox => new List<string> { "==", "!=" },
            FieldType.Date => new List<string> { "==", "!=", ">", "<", ">=", "<=" },
            _ => new List<string> { "==", "!=", "contains", "startsWith", "endsWith" }
        };
    }

    private void UpdateConditionField(FieldCondition condition)
    {
        var field = GetSelectedConditionField(condition);
        if (field != null)
        {
            // Set default operator based on field type
            condition.Operator = field.Type switch
            {
                FieldType.Number => "==",
                FieldType.Checkbox => "==",
                FieldType.Date => "==",
                _ => "contains"
            };

            // Reset value when field changes
            condition.Value = field.Type switch
            {
                FieldType.Number => 0,
                FieldType.Checkbox => false,
                FieldType.Date => DateTime.Today,
                _ => ""
            };
        }

        OnFieldChanged.InvokeAsync();
    }

    private void AddRule()
    {
        Field.Rules.Add(new FieldRule
            {
                ConditionGroups = new List<ConditionGroup>
        {
            new ConditionGroup
            {
                Conditions = new List<FieldCondition>()
            }
        },
                Actions = new List<FieldAction>()
            });
        OnFieldChanged.InvokeAsync();
    }

    private void AddConditionGroup(FieldRule rule)
    {
        rule.ConditionGroups.Add(new ConditionGroup
            {
                Conditions = new List<FieldCondition>()
            });
        OnFieldChanged.InvokeAsync();
    }

    private void AddCondition(ConditionGroup conditionGroup)
    {
        conditionGroup.Conditions.Add(new FieldCondition());
        OnFieldChanged.InvokeAsync();
    }

    private void AddAction(FieldRule rule)
    {
        rule.Actions.Add(new FieldAction
            {
                Type = "show",
                DataSource = new DataSourceConfig()
            });
        OnFieldChanged.InvokeAsync();
    }

    // Keep your existing Remove methods, but add this one:
    private void RemoveCondition(ConditionGroup group, FieldCondition condition)
    {
        group.Conditions.Remove(condition);
        OnFieldChanged.InvokeAsync();
    }
    private void RemoveRule(FieldRule rule)
    {
        Field.Rules.Remove(rule);
        OnFieldChanged.InvokeAsync();
    }
    private void RemoveAction(FieldRule rule, FieldAction action)
    {
        rule.Actions.Remove(action);
        OnFieldChanged.InvokeAsync();
    }
}
