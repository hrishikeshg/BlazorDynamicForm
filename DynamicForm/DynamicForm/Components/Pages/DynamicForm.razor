@using DynamicForm.Components.Shared
@using DynamicForm.Helper
@using DynamicForm.Models
@using DynamicForm.Services
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Rendering
@inject RuleEngineService RuleEngine
@implements IDisposable

@typeparam TItem
@inherits OwningComponentBase<FormService>
<EditForm Model="@FormValues" OnValidSubmit="@(() => HandleValidSubmitInternal())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <!-- Rule evaluation feedback -->
    @if (RuleEngine.EvaluationResults.Any())
    {
        <div class="rule-feedback">
            @foreach (var result in RuleEngine.EvaluationResults)
            {
                <div class="alert alert-info">
                    @result.Message
                </div>
            }
        </div>
    }

    @foreach (var field in FormDefinition.Fields)
    {
        @if (!field.IsHidden)
        {
            <div class="form-group">
                <label>
                    @field.Label 
                    @if (field.IsRequired) { <span class="text-danger">*</span> }
                    @if (field.IsSystemControlled)
                    {
                        <span class="badge bg-info" title="@field.SystemSetReason">System-controlled</span>
                    }
                </label>

                <DynamicField Field="@field" 
                             FormValues="@FormValues" 
                             OnValueChanged="@(async (value) => await HandleValueChanged(field, value))" />
                
                <ValidationMessage For="@(() => FormValues[field.Name])" />
                
                <!-- Show custom validation messages -->
                @foreach (var validation in field.CustomValidations)
                {
                    if (ShouldShowValidation(field, validation))
                    {
                        <div class="text-danger field-validation-error">
                            @validation.ErrorMessage
                        </div>
                    }
                }
            </div>
        }
    }
    
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    [Parameter] public FormDefinition FormDefinition { get; set; }
    [Parameter] public TItem FormData { get; set; }
    [Parameter] public EventCallback<TItem> FormDataChanged { get; set; }
    [Parameter] public EventCallback<Dictionary<string, object>> OnValidSubmit { get; set; }
    

    private CustomValidator _validator;
    private Dictionary<string, object> FormValues = new();
    private FormFieldModel WorkingModel;
    private bool UseDictionaryModel => FormData is Dictionary<string, object>;
    protected override async Task OnInitializedAsync()
    {
        // Initialize form values...
        await RuleEngine.EvaluateFormRules(FormDefinition, FormValues);
    }    

    private async Task HandleValueChanged(FormField field, object value)
    {
        try
        {
            await RuleEngine.EvaluateFormRules(FormDefinition, FormValues, field.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in HandleValueChanged: {ex.Message}");
        }        
    }
    
    private async Task HandleValidSubmitInternal()
    {
        //_validator?.Validate();
        var submittedValues = new Dictionary<string, object>(FormValues);
        // Invoke the parent's handler with the cloned values
        await OnValidSubmit.InvokeAsync(submittedValues);
    }
    private bool ShouldShowValidation(FormField field, ValidationRule validation)
    {
        if (string.IsNullOrEmpty(validation.Condition)) return true;

        // Evaluate the validation condition
        return RuleEngine.EvaluateConditionGroups(new List<ConditionGroup>
        {
            new ConditionGroup
            {
                Conditions = new List<FieldCondition>
                {
                    new FieldCondition
                    {
                        FieldId = field.Id,
                        Operator = validation.Condition
                    }
                }
            }
        }, FormDefinition, FormValues);
    }

    public void Dispose()
    {
        RuleEngine?.Dispose();
    }
}